buildscript {
	ext {
		springBootVersion = '2.1.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse-wtp'

group = 'it.niuma'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web-services'
	runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	runtime 'com.microsoft.sqlserver:mssql-jdbc'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compile('org.sql2o:sql2o:1.6.0-RC3')
	compile("wsdl4j:wsdl4j:1.6.1")
	compile group: 'org.springframework.ws', name: 'spring-ws-security', version: '3.0.6.RELEASE'
}


remotes {
  server {
    host = project.hasProperty('ip') ? ip : '' 
    user = 'root'
    password = '#NiumaITAdm@14'
  }
}

ssh.settings {
  logging = 'stdout'
    knownHosts = allowAnyHosts
}

task copyjar {
  doLast {
    if (!project.hasProperty('ip')){
      logger.lifecycle("No IP - Launch with -Pip=xxx.xxx.xxx.xxx");
      throw new StopExecutionException()
    }
    logger.lifecycle("Copying... <$jarPath to $deployPath>") 
    ssh.run{
      session(remotes.server) {
        put from: jarPath, into: deployPath
      }
    }
  }
}

task stopServer {
  doLast {
    if (!project.hasProperty('ip')){
      logger.lifecycle("No IP - Launch with -Pip=xxx.xxx.xxx.xxx");
      throw new StopExecutionException()
    }
    logger.lifecycle("Execute stopServer on $remotes.server.host");
    ssh.run {
      session(remotes.server) {
        execute 'systemctl stop alboFornitori.service'
      }
    }
  }
}

task startServer{
  doLast {
    if (!project.hasProperty('ip')){
      logger.lifecycle("No IP - Launch with -Pip=xxx.xxx.xxx.xxx");
      throw new StopExecutionException()
    }
    logger.lifecycle("Execute stopServer on $remotes.server.host");
      ssh.run {
        session(remotes.server) {
        execute 'systemctl start alboFornitori.service'
      }
    }
  }
}
